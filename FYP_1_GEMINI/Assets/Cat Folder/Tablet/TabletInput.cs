//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Cat Folder/Tablet/TabletInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @TabletInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TabletInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""TabletInput"",
    ""maps"": [
        {
            ""name"": ""wheel"",
            ""id"": ""4b5ad719-2b33-4422-8ab3-fb46c426e661"",
            ""actions"": [
                {
                    ""name"": ""Scroll/y"",
                    ""type"": ""PassThrough"",
                    ""id"": ""d30ab6c9-e725-44f2-ac46-ee035b6530fa"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""d514c811-2afb-404f-a6bc-124b552848ae"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ef7c96c1-09ca-4d6b-bf63-060180c03cce"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Scroll/y"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a09f3682-ee62-4017-9b6b-1ccb781c1f3e"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // wheel
        m_wheel = asset.FindActionMap("wheel", throwIfNotFound: true);
        m_wheel_Scrolly = m_wheel.FindAction("Scroll/y", throwIfNotFound: true);
        m_wheel_Select = m_wheel.FindAction("Select", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // wheel
    private readonly InputActionMap m_wheel;
    private IWheelActions m_WheelActionsCallbackInterface;
    private readonly InputAction m_wheel_Scrolly;
    private readonly InputAction m_wheel_Select;
    public struct WheelActions
    {
        private @TabletInput m_Wrapper;
        public WheelActions(@TabletInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Scrolly => m_Wrapper.m_wheel_Scrolly;
        public InputAction @Select => m_Wrapper.m_wheel_Select;
        public InputActionMap Get() { return m_Wrapper.m_wheel; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(WheelActions set) { return set.Get(); }
        public void SetCallbacks(IWheelActions instance)
        {
            if (m_Wrapper.m_WheelActionsCallbackInterface != null)
            {
                @Scrolly.started -= m_Wrapper.m_WheelActionsCallbackInterface.OnScrolly;
                @Scrolly.performed -= m_Wrapper.m_WheelActionsCallbackInterface.OnScrolly;
                @Scrolly.canceled -= m_Wrapper.m_WheelActionsCallbackInterface.OnScrolly;
                @Select.started -= m_Wrapper.m_WheelActionsCallbackInterface.OnSelect;
                @Select.performed -= m_Wrapper.m_WheelActionsCallbackInterface.OnSelect;
                @Select.canceled -= m_Wrapper.m_WheelActionsCallbackInterface.OnSelect;
            }
            m_Wrapper.m_WheelActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Scrolly.started += instance.OnScrolly;
                @Scrolly.performed += instance.OnScrolly;
                @Scrolly.canceled += instance.OnScrolly;
                @Select.started += instance.OnSelect;
                @Select.performed += instance.OnSelect;
                @Select.canceled += instance.OnSelect;
            }
        }
    }
    public WheelActions @wheel => new WheelActions(this);
    public interface IWheelActions
    {
        void OnScrolly(InputAction.CallbackContext context);
        void OnSelect(InputAction.CallbackContext context);
    }
}
