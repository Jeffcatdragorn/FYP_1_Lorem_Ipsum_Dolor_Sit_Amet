//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Art/Cip'sArt/CombatControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CombatControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CombatControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CombatControls"",
    ""maps"": [
        {
            ""name"": ""HumanoidActions"",
            ""id"": ""9f248260-a7a2-44a4-814d-fca006fc547b"",
            ""actions"": [
                {
                    ""name"": ""Actions"",
                    ""type"": ""Button"",
                    ""id"": ""01af1190-0a46-49f4-af02-7fccbd16bc0c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Aim"",
                    ""type"": ""Value"",
                    ""id"": ""9e16a3dc-98ef-4998-ae42-d6c29bc5d0cb"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""704c9b35-1069-445f-a9b3-ca34bb4b9d1b"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": ""ScaleVector2(x=0.03,y=0.03)"",
                    ""groups"": """",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""69a4d7fd-4647-43ed-a688-e10d81a4d3ec"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Actions"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // HumanoidActions
        m_HumanoidActions = asset.FindActionMap("HumanoidActions", throwIfNotFound: true);
        m_HumanoidActions_Actions = m_HumanoidActions.FindAction("Actions", throwIfNotFound: true);
        m_HumanoidActions_Aim = m_HumanoidActions.FindAction("Aim", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // HumanoidActions
    private readonly InputActionMap m_HumanoidActions;
    private IHumanoidActionsActions m_HumanoidActionsActionsCallbackInterface;
    private readonly InputAction m_HumanoidActions_Actions;
    private readonly InputAction m_HumanoidActions_Aim;
    public struct HumanoidActionsActions
    {
        private @CombatControls m_Wrapper;
        public HumanoidActionsActions(@CombatControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Actions => m_Wrapper.m_HumanoidActions_Actions;
        public InputAction @Aim => m_Wrapper.m_HumanoidActions_Aim;
        public InputActionMap Get() { return m_Wrapper.m_HumanoidActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(HumanoidActionsActions set) { return set.Get(); }
        public void SetCallbacks(IHumanoidActionsActions instance)
        {
            if (m_Wrapper.m_HumanoidActionsActionsCallbackInterface != null)
            {
                @Actions.started -= m_Wrapper.m_HumanoidActionsActionsCallbackInterface.OnActions;
                @Actions.performed -= m_Wrapper.m_HumanoidActionsActionsCallbackInterface.OnActions;
                @Actions.canceled -= m_Wrapper.m_HumanoidActionsActionsCallbackInterface.OnActions;
                @Aim.started -= m_Wrapper.m_HumanoidActionsActionsCallbackInterface.OnAim;
                @Aim.performed -= m_Wrapper.m_HumanoidActionsActionsCallbackInterface.OnAim;
                @Aim.canceled -= m_Wrapper.m_HumanoidActionsActionsCallbackInterface.OnAim;
            }
            m_Wrapper.m_HumanoidActionsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Actions.started += instance.OnActions;
                @Actions.performed += instance.OnActions;
                @Actions.canceled += instance.OnActions;
                @Aim.started += instance.OnAim;
                @Aim.performed += instance.OnAim;
                @Aim.canceled += instance.OnAim;
            }
        }
    }
    public HumanoidActionsActions @HumanoidActions => new HumanoidActionsActions(this);
    public interface IHumanoidActionsActions
    {
        void OnActions(InputAction.CallbackContext context);
        void OnAim(InputAction.CallbackContext context);
    }
}
